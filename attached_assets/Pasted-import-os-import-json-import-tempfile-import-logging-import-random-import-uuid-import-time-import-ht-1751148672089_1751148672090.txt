import os
import json
import tempfile
import logging
import random
import uuid
import time
import html
import re
import requests
import hashlib
from urllib.parse import urlparse
from flask import Flask, render_template, request, flash, send_file, redirect, url_for, jsonify
from flask_cors import CORS
import genanki

# Configure logging
logging.basicConfig(level=logging.DEBUG)

# Create the app
app = Flask(__name__)
app.secret_key = os.environ.get("SESSION_SECRET", "dev-secret-key-change-in-production")

# Configure CORS for API endpoints
CORS(app, resources={
    r"/api/*": {
        "origins": "*",
        "methods": ["GET", "POST", "OPTIONS"],
        "allow_headers": ["Content-Type", "Authorization"]
    }
})

def download_image_from_url(url, media_files_list):
    """Download image from URL and return local filename for Anki embedding"""
    try:
        # Create a safe filename from URL
        parsed_url = urlparse(url)
        filename = os.path.basename(parsed_url.path)
        
        # If no filename in URL, generate one from URL hash
        if not filename or '.' not in filename:
            url_hash = hashlib.md5(url.encode()).hexdigest()[:8]
            filename = f"image_{url_hash}.jpg"
        
        # Ensure we have a valid extension
        valid_extensions = ['.jpg', '.jpeg', '.png', '.gif', '.svg', '.webp']
        if not any(filename.lower().endswith(ext) for ext in valid_extensions):
            filename += '.jpg'
        
        # Download the image with proper headers for AWS S3
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
        response = requests.get(url, headers=headers, timeout=30)
        response.raise_for_status()
        
        # Save to temporary file
        temp_path = os.path.join(tempfile.gettempdir(), filename)
        with open(temp_path, 'wb') as f:
            f.write(response.content)
        
        # Add to media files list for Anki package
        media_files_list.append(temp_path)
        
        # Return just the filename for Anki reference
        return filename
        
    except Exception as e:
        print(f"Error downloading image from {url}: {e}")
        return None

def apply_medical_highlighting(text):
    """Apply red highlighting to medical terms and key concepts"""
    if not text:
        return text
    
    # Medical terms that should be highlighted in red
    medical_terms = [
        # Anatomical terms
        r'\b(cervical enlargement|lumbosacral enlargement|brachial plexus|lumbosacral plexus)\b',
        r'\b(spinal cord|spinal nerves|vertebral levels?)\b',
        r'\b([CLT]\d+-[CLT]\d+|[CLT]\d+)\b',  # Spinal level patterns like C4-T1, L2-S3
        r'\b(dorsal horn|substantia gelatinosa|spinothalamic tract)\b',
        
        # Key medical concepts
        r'\b(weakness|sensation|abduction|flexion|extension)\b',
        r'\b(neurological examination|imaging|injury)\b',
        r'\b(epidural|anesthesia|analgesia)\b',
        
        # Answer patterns
        r'\b(Correct Answer:?\s*[A-F]\.?\s*[^<\n]*)\b',
    ]
    
    highlighted_text = text
    for pattern in medical_terms:
        highlighted_text = re.sub(
            pattern, 
            r'<span class="highlight-red">\1</span>', 
            highlighted_text, 
            flags=re.IGNORECASE
        )
    
    return highlighted_text

def format_vignette_content(vignette_data):
    """Format clinical vignette with proper structure and click-to-reveal functionality"""
    if not vignette_data:
        return ''
    
    if isinstance(vignette_data, dict):
        clinical_case = vignette_data.get('clinical_case', '')
        explanation = vignette_data.get('explanation', '')
        combined_content = f"{clinical_case} {explanation}".strip()
    else:
        combined_content = str(vignette_data).strip()
    
    if not combined_content:
        return ''
    
    # Apply medical highlighting to the content
    highlighted_content = apply_medical_highlighting(combined_content)
    
    # Format answer choices vertically (A, B, C, D, E on separate lines)
    highlighted_content = re.sub(r'([A-F]\.)', r'<br>\1', highlighted_content)
    if highlighted_content.startswith('<br>'):
        highlighted_content = highlighted_content[4:]  # Remove leading <br>
    
    # Handle "Correct Answer:" section with click-to-reveal
    if 'Correct Answer:' in highlighted_content:
        parts = highlighted_content.split('Correct Answer:', 1)
        if len(parts) == 2:
            question_part = parts[0].strip()
            answer_part = parts[1].strip()
            
            # Create click-to-reveal section with working JavaScript
            reveal_section = f'''
            <div class="answer-reveal-container" style="background-color: #e3f2fd; padding: 15px; border-radius: 8px; margin: 15px 0; border: 2px dashed #1976d2; cursor: pointer;" onclick="this.querySelector('.hidden-answer').style.display = this.querySelector('.hidden-answer').style.display === 'none' ? 'block' : 'none';">
                <div style="color: #1976d2; font-weight: bold; font-size: 1.1em;">
                    üîç Click to reveal correct answer and explanation ‚Üì
                </div>
                <div class="hidden-answer" style="display: none; margin-top: 15px; padding-top: 15px; border-top: 2px solid #1976d2;">
                    <div style="color: #d32f2f; font-weight: bold; font-size: 1.1em; margin-bottom: 10px;">
                        Correct Answer:
                    </div>
                    <div style="color: #d32f2f; font-weight: bold; margin-bottom: 15px;">
                        {answer_part.split('.')[0] if '.' in answer_part else answer_part}
                    </div>
                    <div style="color: #1976d2; font-weight: bold; margin-bottom: 8px;">
                        Explanation:
                    </div>
                    <div style="color: #424242; line-height: 1.4;">
                        The correct answer demonstrates the key anatomical concept being tested in this clinical scenario.
                    </div>
                </div>
            </div>'''
            
            highlighted_content = f"{question_part}<br><br>{reveal_section}"
    
    return highlighted_content

def create_enhanced_anking_model():
    """Create enhanced AnKing model with improved styling for medical cards"""
    
    # Enhanced CSS with better clinical vignette and mnemonic styling
    enhanced_css = """
/*    ENHANCED ANKINGOVERHAUL FOR MEDICAL CARDS   */

/* Base AnKing styling */
html {
  font-size: 28px;
}

.mobile {
  font-size: 28px;
}

.card,
kbd {
  font-family: Arial Greek, Arial;
}

.card {
  text-align: center;
  font-size: 1rem;
  color: black;
  background-color: #D1CFCE;
  height: 100%;
  margin: 0px 15px;
  flex-grow: 1;
  padding-bottom: 1em;
  margin-top: 15px;
}

.mobile.card {
  padding-bottom: 5em;
  margin: 1ex.3px;
}

hr {
  opacity:.7;
  margin: 20px 0;
}

img {
  max-width: 85%;
  max-height: 400px;
  border-radius: 8px;
  box-shadow: 0 4px 8px rgba(0,0,0,0.1);
  margin: 10px 0;
}

/* Enhanced highlighting for medical terms */
.highlight-red {
  color: #d32f2f !important;
  font-weight: bold;
  background-color: rgba(211, 47, 47, 0.1);
  padding: 2px 4px;
  border-radius: 3px;
}

/* Clinical Vignette Styling - Blue Theme */
#vignette-section {
  background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%);
  border: 3px solid #1976d2;
  border-radius: 12px;
  padding: 20px;
  margin: 20px 0;
  text-align: left;
  box-shadow: 0 4px 12px rgba(25, 118, 210, 0.2);
}

#vignette-section h3 {
  color: #0d47a1;
  margin-top: 0;
  margin-bottom: 15px;
  font-size: 1.2em;
  font-weight: bold;
  text-align: center;
  background-color: rgba(255,255,255,0.7);
  padding: 8px;
  border-radius: 6px;
}

.vignette-content {
  line-height: 1.5;
  color: #1565c0;
  font-size: 0.95em;
}

/* Mnemonic Styling - Gold/Orange Theme */
#mnemonic-section {
  background: linear-gradient(135deg, #fff8e1 0%, #ffecb3 100%);
  border: 3px solid #ff9800;
  border-radius: 12px;
  padding: 20px;
  margin: 20px 0;
  text-align: left;
  box-shadow: 0 4px 12px rgba(255, 152, 0, 0.2);
}

#mnemonic-section h3 {
  color: #e65100;
  margin-top: 0;
  margin-bottom: 15px;
  font-size: 1.2em;
  font-weight: bold;
  text-align: center;
  background-color: rgba(255,255,255,0.7);
  padding: 8px;
  border-radius: 6px;
}

.mnemonic-content {
  font-weight: bold;
  color: #bf360c;
  line-height: 1.4;
  font-size: 0.95em;
}

/* Extra field styling */
#extra {
  font-style: italic;
  font-size: 1rem;
  color: navy;
  margin-top: 25px;
  padding-top: 15px;
  border-top: 1px dashed #ccc;
  text-align: left;
}

/* Answer reveal functionality */
.answer-reveal-container:hover {
  background-color: #bbdefb !important;
  border-color: #0d47a1 !important;
}

/* Night mode support */
.nightMode.card,
.night_mode.card {
  color: #FFFAFA!important;
  background-color: #272828!important;
}

.nightMode #vignette-section, .night_mode #vignette-section {
  background: linear-gradient(135deg, #1a237e 0%, #303f9f 100%);
  border-color: #3f51b5;
}

.nightMode #mnemonic-section, .night_mode #mnemonic-section {
  background: linear-gradient(135deg, #3e2723 0%, #5d4037 100%);
  border-color: #ff9800;
}

.nightMode .highlight-red, .night_mode .highlight-red {
  color: #ff6b6b !important;
  background-color: rgba(255, 107, 107, 0.2);
}
"""
    
    # Define all fields
    fields = [
        {'name': 'Front'},
        {'name': 'Back'}, 
        {'name': 'Extra'},
        {'name': 'Vignette'},
        {'name': 'Mnemonic'},
        {'name': 'Image'}
    ]
