import os
import json
import html
import asyncio
from datetime import datetime
from typing import List, Dict, Any, Optional
from fastapi import FastAPI, HTTPException, Request, BackgroundTasks, Path
from fastapi.responses import HTMLResponse, FileResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from pydantic import BaseModel, Field, validator
import uvicorn
import genanki
import random

# Create directories
os.makedirs("temp", exist_ok=True)
os.makedirs("static", exist_ok=True)
os.makedirs("templates", exist_ok=True)

app = FastAPI(title="Medical Flashcard Generator")

# Mount static files and templates
app.mount("/static", StaticFiles(directory="static"), name="static")
templates = Jinja2Templates(directory="templates")

# Pydantic models
class FlashcardData(BaseModel):
    front: str = Field(..., min_length=1)
    back: str = Field(..., min_length=1)
    explanation: Optional[str] = None
    tags: List[str] = Field(default_factory=list)
    category: str = "General"
    images: List[str] = Field(default_factory=list)
    mnemonic: Optional[str] = None
    clinical_vignette: Optional[str] = None
    
    @validator('front', 'back', 'explanation', 'mnemonic', 'clinical_vignette', pre=True)
    def clean_html(cls, v):
        if isinstance(v, str):
            return html.unescape(v).strip()
        return v

class N8nWebhookPayload(BaseModel):
    workflow_id: Optional[str] = None
    execution_id: Optional[str] = None
    data: Dict[str, Any] = Field(default_factory=dict)
    cards: Optional[List[FlashcardData]] = None
    
    @validator('cards', pre=True, always=True)
    def extract_cards(cls, v, values):
        if v:
            return v
        
        # Extract from data field
        data = values.get('data', {})
        cards = []
        
        # Handle different n8n data structures
        if isinstance(data, list):
            for item in data:
                try:
                    cards.append(FlashcardData(**item))
                except:
                    pass
        elif isinstance(data, dict):
            if 'items' in data:
                for item in data['items']:
                    try:
                        cards.append(FlashcardData(**item))
                    except:
                        pass
            elif 'front' in data and 'back' in data:
                try:
                    cards.append(FlashcardData(**data))
                except:
                    pass
        
        return cards

# Anki generation service
class AnkiGenerator:
    def __init__(self):
        self.medical_model = self._create_medical_model()
    
    def _create_medical_model(self):
        return genanki.Model(
            1607392319,
            'Medical Flashcard Model',
            fields=[
                {'name': 'Clinical_Vignette'},
                {'name': 'Question'},
                {'name': 'Answer'},
                {'name': 'Explanation'},
                {'name': 'Tags'},
                {'name': 'Images'},
                {'name': 'Mnemonics'}
            ],
            templates=[
                {
                    'name': 'Medical Card',
                    'qfmt': '''
                        <div class="card">
                            {{#Clinical_Vignette}}
                            <div class="clinical-vignette">{{Clinical_Vignette}}</div>
                            {{/Clinical_Vignette}}
                            <div class="question">{{Question}}</div>
                            {{#Images}}<div class="image-container">{{Images}}</div>{{/Images}}
                        </div>
                    ''',
                    'afmt': '''
                        {{FrontSide}}
                        <hr id="answer">
                        <div class="answer">{{Answer}}</div>
                        {{#Explanation}}<div class="explanation">{{Explanation}}</div>{{/Explanation}}
                        {{#Mnemonics}}<div class="mnemonic">{{Mnemonics}}</div>{{/Mnemonics}}
                        <div class="tags">{{Tags}}</div>
                    '''
                }
            ],
            css='''
                .card {
                    font-family: "Helvetica Neue", Arial, sans-serif;
                    font-size: 18px;
                    line-height: 1.6;
                    color: #333;
                    background-color: #fff;
                    padding: 20px;
                    max-width: 800px;
                    margin: 0 auto;
                }
                
                .clinical-vignette {
                    background-color: #f8f9fa;
                    border-left: 4px solid #007bff;
                    padding: 15px;
                    margin-bottom: 20px;
                    border-radius: 4px;
                }
                
                .question {
                    font-weight: bold;
                    font-size: 20px;
                    margin-bottom: 15px;
                    color: #2c3e50;
                }
                
                .answer {
                    background-color: #e8f5e8;
                    padding: 15px;
                    border-radius: 4px;
                    margin-bottom: 15px;
                }
                
                .explanation {
                    background-color: #fff3cd;
                    border: 1px solid #ffeaa7;
                    padding: 15px;
                    border-radius: 4px;
                    margin-bottom: 15px;
                }
                
                .mnemonic {
                    background-color: #e1f5fe;
                    border-left: 4px solid #29b6f6;
                    padding: 15px;
                    font-style: italic;
                    border-radius: 4px;
                    margin-bottom: 15px;
                }
                
                .image-container {
                    text-align: center;
                    margin: 15px 0;
                }
                
                .image-container img {
                    max-width: 100% !important;
                    height: auto !important;
                    border-radius: 4px;
                    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
                }
                
                .tags {
                    font-size: 14px;
                    color: #666;
                    margin-top: 15px;
                }
                
                /* Drug and dosage styling */
                .drug-name {
                    font-weight: bold;
                    color: #e74c3c;
                    background-color: #fdf2f2;
                    padding: 2px 6px;
                    border-radius: 3px;
                }
                
                .dosage {
                    font-weight: bold;
                    color: #27ae60;
                    background-color: #f0f8f0;
                    padding: 2px 6px;
                    border-radius: 3px;
                }
                
                /* Tables */
                table {
                    width: 100%;
                    border-collapse: collapse;
                    margin: 15px 0;
                }
                
                th, td {
                    border: 1px solid #ddd;
                    padding: 8px;
                    text-align: left;
                }
                
                th {
                    background-color: #f2f2f2;
                    font-weight: bold;
                }
                
                /* Mobile optimization */
                .mobile .card {
                    font-size: 16px;
                    padding: 15px;
                }
                
                .mobile img {
                    max-width: 300px !important;
                    max-height: 300px !important;
                }
                
                /* Night mode support */
                .nightMode .card {
                    background-color: #2c2c2c;
                    color: #e0e0e0;
                }
                
                .nightMode .clinical-vignette {
                    background-color: #3a3a3a;
                    border-left-color: #5dade2;
                }
                
                .nightMode .answer {
                    background-color: #2e4a2e;
                }
                
                .nightMode .explanation {
                    background-color: #4a3d1f;
                    border-color: #6b5821;
                }
            '''
        )
    
    async def generate_deck(self, deck_name: str, cards: List[FlashcardData]) -> str:
        # Create deck
        deck_id = abs(hash(deck_name + str(datetime.now()))) % (10**9)
        deck = genanki.Deck(deck_id, deck_name)
        
        # Add cards
        for card in cards:
            # Format images
            images_html = ""
            if card.images:
                images_html = "".join([f'<img src="{img}">' for img in card.images])
            
            # Create note
            note = genanki.Note(
                model=self.medical_model,
                fields=[
                    card.clinical_vignette or "",
                    card.front,
                    card.back,
                    card.explanation or "",
                    ", ".join(card.tags) if card.tags else "",
                    images_html,
                    card.mnemonic or ""
                ],
                tags=card.tags
            )
            deck.add_note(note)
        
        # Generate file
        filename = f"{deck_name.replace(' ', '_')}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.apkg"
        filepath = os.path.join("temp", filename)
        
        package = genanki.Package(deck)
        package.write_to_file(filepath)
        
        return filename

# Initialize services
anki_generator = AnkiGenerator()

# API endpoints
@app.get("/", response_class=HTMLResponse)
async def home(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})

@app.post("/api/webhook/n8n")
async def receive_n8n_webhook(payload: N8nWebhookPayload, background_tasks: BackgroundTasks):
    try:
        if not payload.cards:
            raise HTTPException(status_code=400, detail="No valid flashcard data found")
        
        # Generate deck name
        deck_name = f"Medical Flashcards - {datetime.now().strftime('%Y-%m-%d')}"
        if payload.workflow_id:
            deck_name = f"n8n_{payload.workflow_id}"
        
        # Generate Anki file
        filename = await anki_generator.generate_deck(deck_name, payload.cards)
        
        # Schedule cleanup after 24 hours
        background_tasks.add_task(cleanup_file, filename, 86400)
        
        return {
            "success": True,
            "filename": filename,
            "deck_name": deck_name,
            "card_count": len(payload.cards),
            "download_url": f"/api/download/{filename}"
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/download/{filename}")
async def download_file(filename: str = Path(..., regex=r"^[a-zA-Z0-9_\-\.]+\.apkg$")):
    filepath = os.path.join("temp", filename)
    
    if not os.path.exists(filepath):
        raise HTTPException(status_code=404, detail="File not found")
    
    return FileResponse(
        path=filepath,
        filename=filename,
        media_type='application/octet-stream'
    )

@app.post("/api/generate")
async def generate_from_ui(cards_data: List[FlashcardData]):
    try:
        deck_name = f"Medical Flashcards - {datetime.now().strftime('%Y-%m-%d %H:%M')}"
        filename = await anki_generator.generate_deck(deck_name, cards_data)
        
        return {
            "success": True,
            "filename": filename,
            "download_url": f"/api/download/{filename}"
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

async def cleanup_file(filename: str, delay: int):
    await asyncio.sleep(delay)
    filepath = os.path.join("temp", filename)
    if os.path.exists(filepath):
        os.remove(filepath)

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8080)
3. Beautiful UI template (templates/index.html)
html<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Medical Flashcard Generator</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/static/style.css">
</head>
<body class="min-h-screen bg-gray-50">
    <div class="max-w-7xl mx-auto px-4 py-8">
        <!-- Header -->
        <header class="mb-8">
            <div class="flex items-center justify-between">
                <div class="flex items-center space-x-3">
                    <i class="fas fa-graduation-cap text-3xl text-blue-600"></i>
                    <h1 class="text-3xl font-bold text-gray-800">Medical Flashcard Generator</h1>
                </div>
                <button onclick="toggleTheme()" class="p-2 rounded-lg bg-gray-200 hover:bg-gray-300 transition">
                    <i class="fas fa-moon text-gray-700"></i>
                </button>
            </div>
            <p class="mt-2 text-gray-600">Create beautiful Anki flashcards from n8n webhooks or manual input</p>
        </header>

        <!-- Main Content -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <!-- Input Section -->
            <div class="bg-white rounded-lg shadow-lg p-6">
                <h2 class="text-xl font-semibold mb-4 flex items-center">
                    <i class="fas fa-edit mr-2 text-blue-600"></i>
                    Create Flashcard
                </h2>
                
                <form id="flashcardForm" class="space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Clinical Vignette (Optional)</label>
                        <textarea id="vignette" rows="3" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" placeholder="A 65-year-old male presents with..."></textarea>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Question <span class="text-red-500">*</span></label>
                        <textarea id="question" rows="2" required class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" placeholder="What is the diagnosis?"></textarea>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Answer <span class="text-red-500">*</span></label>
                        <textarea id="answer" rows="2" required class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" placeholder="Myocardial infarction"></textarea>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Explanation</label>
                        <textarea id="explanation" rows="3" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" placeholder="The ST elevation in inferior leads indicates..."></textarea>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Mnemonic</label>
                        <input type="text" id="mnemonic" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" placeholder="STEMI = ST Elevation Myocardial Infarction">
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Category</label>
                        <select id="category" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                            <option value="General">General</option>
                            <option value="Anatomy">Anatomy</option>
                            <option value="Physiology">Physiology</option>
                            <option value="Pathology">Pathology</option>
                            <option value="Pharmacology">Pharmacology</option>
                            <option value="Cardiology">Cardiology</option>
                            <option value="Neurology">Neurology</option>
                        </select>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Tags (comma-separated)</label>
                        <input type="text" id="tags" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" placeholder="cardiology, emergency, diagnosis">
                    </div>
                    
                    <button type="submit" class="w-full bg-blue-600 text-white py-3 px-4 rounded-lg hover:bg-blue-700 transition duration-200 font-medium">
                        <i class="fas fa-plus mr-2"></i>Add Flashcard
                    </button>
                </form>
            </div>

            <!-- Preview Section -->
            <div class="space-y-6">
                <!-- Flashcard Preview -->
                <div class="bg-white rounded-lg shadow-lg p-6">
                    <h2 class="text-xl font-semibold mb-4 flex items-center">
                        <i class="fas fa-eye mr-2 text-blue-600"></i>
                        Preview
                    </h2>
                    
                    <div id="previewCard" class="flashcard-preview">
                        <div class="text-center text-gray-400 py-12">
                            <i class="fas fa-clipboard text-4xl mb-3"></i>
                            <p>Your flashcard preview will appear here</p>
                        </div>
                    </div>
                </div>

                <!-- Added Cards List -->
                <div class="bg-white rounded-lg shadow-lg p-6">
                    <div class="flex justify-between items-center mb-4">
                        <h2 class="text-xl font-semibold flex items-center">
                            <i class="fas fa-list mr-2 text-blue-600"></i>
                            Added Cards (<span id="cardCount">0</span>)
                        </h2>
                        <button onclick="clearAllCards()" class="text-red-600 hover:text-red-700 text-sm">
                            Clear All
                        </button>
                    </div>
                    
                    <div id="cardsList" class="space-y-2 max-h-64 overflow-y-auto">
                        <p class="text-gray-400 text-center py-4">No cards added yet</p>
                    </div>
                    
                    <button onclick="generateDeck()" id="generateBtn" disabled class="w-full mt-4 bg-green-600 text-white py-3 px-4 rounded-lg hover:bg-green-700 transition duration-200 font-medium disabled:bg-gray-300 disabled:cursor-not-allowed">
                        <i class="fas fa-download mr-2"></i>Generate Anki Deck
                    </button>
                </div>
            </div>
        </div>

        <!-- Webhook Info -->
        <div class="mt-8 bg-blue-50 border border-blue-200 rounded-lg p-6">
            <h3 class="text-lg font-semibold text-blue-900 mb-2">
                <i class="fas fa-webhook mr-2"></i>n8n Webhook Integration
            </h3>
            <p class="text-blue-800 mb-3">Send your flashcard data to:</p>
            <code class="bg-blue-100 text-blue-900 px-3 py-1 rounded text-sm">/api/webhook/n8n</code>
            
            <details class="mt-4">
                <summary class="cursor-pointer text-blue-700 hover:text-blue-800">View example payload</summary>
                <pre class="mt-2 bg-blue-100 p-3 rounded text-sm overflow-x-auto"><code>{
  "workflow_id": "abc123",
  "cards": [
    {
      "front": "What is hypertension?",
      "back": "High blood pressure (≥130/80 mmHg)",
      "explanation": "Chronic elevation of blood pressure",
      "tags": ["cardiology", "diagnosis"],
      "category": "Cardiology"
    }
  ]
}</code></pre>
            </details>
        </div>
    </div>

    <!-- Success Modal -->
    <div id="successModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div class="bg-white rounded-lg p-8 max-w-md w-full mx-4">
            <div class="text-center">
                <i class="fas fa-check-circle text-5xl text-green-600 mb-4"></i>
                <h3 class="text-xl font-semibold mb-2">Deck Generated Successfully!</h3>
                <p class="text-gray-600 mb-6">Your Anki deck is ready for download.</p>
                <a id="downloadLink" href="#" class="inline-block bg-green-600 text-white py-3 px-6 rounded-lg hover:bg-green-700 transition duration-200 font-medium">
                    <i class="fas fa-download mr-2"></i>Download Deck
                </a>
                <button onclick="closeModal()" class="block w-full mt-3 text-gray-600 hover:text-gray-800">
                    Close
                </button>
            </div>
        </div>
    </div>

    <script src="/static/script.js"></script>
</body>
</html>
4. CSS styling (static/style.css)
css/* Flashcard Preview Styles */
.flashcard-preview {
    background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
    border-radius: 12px;
    padding: 24px;
    min-height: 200px;
    position: relative;
    overflow: hidden;
}

.flashcard-preview::before {
    content: '';
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: repeating-linear-gradient(
        45deg,
        transparent,
        transparent 10px,
        rgba(255,255,255,.1) 10px,
        rgba(255,255,255,.1) 20px
    );
    animation: shimmer 20s linear infinite;
}

@keyframes shimmer {
    0% { transform: translateX(-50%) translateY(-50%) rotate(0deg); }
    100% { transform: translateX(-50%) translateY(-50%) rotate(360deg); }
}

.card-item {
    background: white;
    border: 1px solid #e5e7eb;
    border-radius: 8px;
    padding: 12px;
    transition: all 0.2s ease;
}

.card-item:hover {
    border-color: #3b82f6;
    box-shadow: 0 2px 8px rgba(59, 130, 246, 0.1);
}

/* Dark mode styles */
body.dark {
    background-color: #1a1a1a;
    color: #e0e0e0;
}

body.dark .bg-white {
    background-color: #2d2d2d;
}

body.dark .bg-gray-50 {
    background-color: #1a1a1a;
}

body.dark .text-gray-800 {
    color: #e0e0e0;
}

body.dark .text-gray-700 {
    color: #b0b0b0;
}

body.dark .text-gray-600 {
    color: #999;
}

body.dark .border-gray-300 {
    border-color: #444;
}

body.dark input,
body.dark textarea,
body.dark select {
    background-color: #3a3a3a;
    color: #e0e0e0;
    border-color: #555;
}

/* Loading animation */
.loading {
    display: inline-block;
    width: 20px;
    height: 20px;
    border: 3px solid rgba(255,255,255,.3);
    border-radius: 50%;
    border-top-color: white; 
    animation: spin 1s ease-in-out infinite;
}

@keyframes spin {
    to { transform: rotate(360deg); }
}

/* Medical-specific styles */
.clinical-vignette {
    background-color: #f0f4f8;
    border-left: 4px solid #4299e1;
    padding: 16px;
    margin-bottom: 16px;
    border-radius: 4px;
}

.mnemonic {
    background-color: #e6fffa;
    border-left: 4px solid #38b2ac;
    padding: 12px;
    font-style: italic;
    border-radius: 4px;
}

.explanation {
    background-color: #fffff0;
    border: 1px solid #ecc94b;
    padding: 12px;
    border-radius: 4px;
}

/* Responsive design */
@media (max-width: 768px) {
    .flashcard-preview {
        min-height: 150px;
    }
}
5. JavaScript functionality (static/script.js)
javascriptlet cards = [];
let currentPreview = null;

// Form submission
document.getElementById('flashcardForm').addEventListener('submit', function(e) {
    e.preventDefault();
    
    const card = {
        clinical_vignette: document.getElementById('vignette').value,
        front: document.getElementById('question').value,
        back: document.getElementById('answer').value,
        explanation: document.getElementById('explanation').value,
        mnemonic: document.getElementById('mnemonic').value,
        category: document.getElementById('category').value,
        tags: document.getElementById('tags').value.split(',').map(tag => tag.trim()).filter(tag => tag)
    };
    
    cards.push(card);
    updateCardsList();
    updatePreview(card);
    
    // Reset form
    this.reset();
    document.getElementById('generateBtn').disabled = false;
});

// Update preview
function updatePreview(card) {
    const previewDiv = document.getElementById('previewCard');
    
    let html = '<div class="space-y-3">';
    
    if (card.clinical_vignette) {
        html += `<div class="clinical-vignette">${escapeHtml(card.clinical_vignette)}</div>`;
    }
    
    html += `
        <div class="font-semibold text-lg text-gray-800">${escapeHtml(card.front)}</div>
        <div class="border-t pt-3">
            <div class="bg-green-50 p-3 rounded text-green-800">${escapeHtml(card.back)}</div>
        </div>
    `;
    
    if (card.explanation) {
        html += `<div class="explanation">${escapeHtml(card.explanation)}</div>`;
    }
    
    if (card.mnemonic) {
        html += `<div class="mnemonic">${escapeHtml(card.mnemonic)}</div>`;
    }
    
    if (card.tags.length > 0) {
        html += '<div class="flex flex-wrap gap-2 mt-3">';
        card.tags.forEach(tag => {
            html += `<span class="px-2 py-1 bg-blue-100 text-blue-700 text-xs rounded-full">${escapeHtml(tag)}</span>`;
        });
        html += '</div>';
    }
    
    html += '</div>';
    previewDiv.innerHTML = html;
}

// Update cards list
function updateCardsList() {
    const listDiv = document.getElementById('cardsList');
    const countSpan = document.getElementById('cardCount');
    
    countSpan.textContent = cards.length;
    
    if (cards.length === 0) {
        listDiv.innerHTML = '<p class="text-gray-400 text-center py-4">No cards added yet</p>';
        return;
    }
    
    listDiv.innerHTML = cards.map((card, index) => `
        <div class="card-item flex justify-between items-center">
            <div class="flex-1">
                <p class="font-medium text-sm">${escapeHtml(card.front.substring(0, 50))}${card.front.length > 50 ? '...' : ''}</p>
                <p class="text-xs text-gray-500">${card.category} • ${card.tags.length} tags</p>
            </div>
            <button onclick="removeCard(${index})" class="text-red-500 hover:text-red-700 p-2">
                <i class="fas fa-trash"></i>
            </button>
        </div>
    `).join('');
}

// Remove card
function removeCard(index) {
    cards.splice(index, 1);
    updateCardsList();
    if (cards.length === 0) {
        document.getElementById('generateBtn').disabled = true;
        document.getElementById('previewCard').innerHTML = `
            <div class="text-center text-gray-400 py-12">
                <i class="fas fa-clipboard text-4xl mb-3"></i>
                <p>Your flashcard preview will appear here</p>
            </div>
        `;
    }
}

// Clear all cards
function clearAllCards() {
    if (confirm('Are you sure you want to clear all cards?')) {
        cards = [];
        updateCardsList();
        document.getElementById('generateBtn').disabled = true;
    }
}

// Generate deck
async function generateDeck() {
    const btn = document.getElementById('generateBtn');
    btn.disabled = true;
    btn.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Generating...';
    
    try {
        const response = await fetch('/api/generate', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(cards)
        });
        
        const data = await response.json();
        
        if (data.success) {
            document.getElementById('downloadLink').href = data.download_url;
            document.getElementById('successModal').classList.remove('hidden');
            
            // Clear cards after successful generation
            cards = [];
            updateCardsList();
        } else {
            alert('Error generating deck. Please try again.');
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Error generating deck. Please try again.');
    } finally {
        btn.disabled = cards.length === 0;
        btn.innerHTML = '<i class="fas fa-download mr-2"></i>Generate Anki Deck';
    }
}

// Close modal
function closeModal() {
    document.getElementById('successModal').classList.add('hidden');
}

// Theme toggle
function toggleTheme() {
    document.body.classList.toggle('dark');
    localStorage.setItem('theme', document.body.classList.contains('dark') ? 'dark' : 'light');
}

// Load theme on startup
document.addEventListener('DOMContentLoaded', function() {
    if (localStorage.getItem('theme') === 'dark') {
        document.body.classList.add('dark');
    }
});

// Escape HTML
function escapeHtml(text) {
    const map = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#039;'
    };
    return text.replace(/[&<>"']/g, m => map[m]);