## Updated Replit Code (Enhanced FlashcardProcessor class):

```python
import os
import json
import tempfile
import logging
import random
import time
import requests
import hashlib
from urllib.parse import urlparse
from flask import Flask, request, send_file, jsonify
from flask_cors import CORS
import genanki

# Configure logging
logging.basicConfig(level=logging.DEBUG)

# Create the app
app = Flask(__name__)
app.secret_key = os.environ.get("SESSION_SECRET", "dev-secret-key-change-in-production")

# Configure CORS for API endpoints
CORS(app, resources={
    r"/api/*": {
        "origins": "*",
        "methods": ["GET", "POST", "OPTIONS"],
        "allow_headers": ["Content-Type", "Authorization"]
    }
})

def download_image_from_url(url, media_files_list):
    """Download image from URL and return local filename for Anki embedding"""
    try:
        parsed_url = urlparse(url)
        filename = os.path.basename(parsed_url.path)
        if not filename or '.' not in filename:
            url_hash = hashlib.md5(url.encode()).hexdigest()[:8]
            filename = f"image_{url_hash}.jpg"

        valid_extensions = ['.jpg', '.jpeg', '.png', '.gif', '.svg', '.webp']
        if not any(filename.lower().endswith(ext) for ext in valid_extensions):
            filename += '.jpg'

        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }

        response = requests.get(url, headers=headers, timeout=30)
        response.raise_for_status()

        temp_path = os.path.join(tempfile.gettempdir(), filename)
        with open(temp_path, 'wb') as f:
            f.write(response.content)

        media_files_list.append(temp_path)
        return filename
    except Exception as e:
        app.logger.error(f"Error downloading image from {url}: {e}")
        return None

def create_enhanced_medical_model():
    """Create enhanced medical model with minimal CSS - let HTML handle styling"""
    minimal_css = """
/* Minimal base styles */
.card { 
    font-family: Arial, sans-serif;
    background-color: white;
    padding: 20px;
}

/* Night mode support */
.night_mode { 
    background-color: #272828;
}

/* Ensure images display properly - SMALLER SIZE */
img { 
    max-width: 70%;  /* Changed from 100% to 70% */
    max-height: 400px;  /* Added max height */
    height: auto;
    display: block;
    margin: 20px auto;
}

/* Ensure caption and notes styling is preserved */
div[style*="color: #FF1493"] {
    color: #FF1493 !important;
}

/* Ensure proper spacing for notes */
div[style*="margin-top: 20px"][style*="margin-bottom: 20px"] {
    margin-top: 20px !important;
    margin-bottom: 20px !important;
}
"""

    fields = [
        {'name': 'Front'},
        {'name': 'Back'}
    ]

    templates = [
        {
            'name': 'Medical Card',
            'qfmt': '''{{Front}}''',
            'afmt': '''{{FrontSide}}
<hr id="answer">
{{Back}}'''
        }
    ]

    # Handle both basic and cloze cards
    cloze_template = {
        'name': 'Cloze Card',
        'qfmt': '''{{cloze:Text}}''',
        'afmt': '''{{cloze:Text}}'''
    }

    model = genanki.Model(
        1607392320,
        'Enhanced Medical Cards',
        fields=fields,
        templates=templates,
        css=minimal_css
    )

    # Create a separate cloze model
    cloze_model = genanki.Model(
        1607392321,
        'Enhanced Medical Cloze',
        fields=[{'name': 'Text'}],
        templates=[cloze_template],
        css=minimal_css,
        model_type=1  # Cloze type
    )

    return model, cloze_model

class EnhancedFlashcardProcessor:
    def __init__(self):
        self.basic_model, self.cloze_model = create_enhanced_medical_model()

    def process_cards(self, cards_data, deck_name="Medical Deck"):
        deck_id = random.randrange(1 << 30, 1 << 31)
        deck = genanki.Deck(deck_id, deck_name)
        media_files = []

        for card_index, card_info in enumerate(cards_data):
            app.logger.info(f"Processing card {card_index + 1}/{len(cards_data)}")

            card_type = card_info.get('type', 'basic').lower()

            if card_type == 'cloze':
                # Process cloze card
                self._process_cloze_card(deck, card_info, media_files)
            else:
                # Process basic card
                self._process_basic_card(deck, card_info, media_files, deck_id, card_index)

        return deck, media_files

    def _process_cloze_card(self, deck, card_info, media_files):
        """Process a cloze deletion card"""
        # For cloze cards, combine all content into the Text field
        content_parts = []

        # Add the front content (which contains the cloze deletions)
        front_html = card_info.get('front', '')
        if front_html:
            content_parts.append(front_html)

        # Add any additional components
        self._add_common_components(content_parts, card_info, media_files)

        # Combine all parts
        full_content = '\n'.join(content_parts)

        # Create cloze note
        note = genanki.Note(
            model=self.cloze_model,
            fields=[full_content],
            tags=[tag.replace(' ', '_') for tag in card_info.get('tags', [])]
        )
        deck.add_note(note)

    def _process_basic_card(self, deck, card_info, media_files, deck_id, card_index):
        """Process a basic (front/back) card"""
        # FRONT: Use exactly as provided
        front_html = card_info.get('front', '')

        # BACK: Build from components
        back_parts = []

        # 1. Answer text - use exactly as provided
        back_text = card_info.get('back', '')
        if back_text:
            back_parts.append(back_text)

        # Add common components (NOTES WILL BE ADDED LAST NOW)
        self._add_common_components(back_parts, card_info, media_files)

        # Combine all back parts
        back_content = '\n'.join(back_parts)

        # Create note with front and back
        note = genanki.Note(
            model=self.basic_model,
            fields=[front_html, back_content],
            tags=[tag.replace(' ', '_') for tag in card_info.get('tags', [])]
        )
        deck.add_note(note)

    def _add_common_components(self, content_parts, card_info, media_files):
        """Add common components - NOTES NOW ADDED LAST"""
        # Store notes to add at the end
        notes_content = None
        
        # 1. Check for notes but don't add yet
        notes = card_info.get('notes', '')
        if notes:
            # Update the notes styling to center-aligned and larger font
            if 'font-size: 0.9em' in notes:
                notes = notes.replace('font-size: 0.9em', 'font-size: 1.2em')
            if 'text-align: center' not in notes:
                # If notes don't have center alignment, add it
                if 'style="' in notes:
                    notes = notes.replace('style="', 'style="text-align: center; ')
                elif '<div' in notes:
                    notes = notes.replace('<div', '<div style="text-align: center;"')
            
            # Ensure proper spacing
            if 'margin-top: 10px' in notes:
                notes = notes.replace('margin-top: 10px', 'margin-top: 20px')
            elif 'margin-top: 20px' not in notes and 'margin-bottom: 20px' not in notes:
                # Add spacing wrapper if not present
                if not notes.startswith('<div'):
                    notes = f'<div style="text-align: center; font-style: italic; margin-top: 20px; color: #FF1493; font-size: 1.2em;">{notes}</div>'
            
            notes_content = notes

        # 2. Images handling with captions
        # Check for 'images' array first (from n8n processing)
        images = card_info.get('images', [])
        if images:
            for image_item in images:
                # Handle both string URLs and objects with URL/caption
                if isinstance(image_item, str) and image_item.startswith('http'):
                    # Simple URL string
                    downloaded_filename = download_image_from_url(image_item, media_files)
                    if downloaded_filename: