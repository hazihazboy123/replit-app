import os
import json
import tempfile
import logging
import random
import time
import requests
import hashlib
from urllib.parse import urlparse
from flask import Flask, request, send_file, jsonify
from flask_cors import CORS
import genanki

# Configure logging
logging.basicConfig(level=logging.DEBUG)

# Create the app
app = Flask(__name__)
app.secret_key = os.environ.get("SESSION_SECRET", "dev-secret-key-change-in-production")

# Configure CORS for API endpoints
CORS(app, resources={
    r"/api/*": {
        "origins": "*",
        "methods": ["GET", "POST", "OPTIONS"],
        "allow_headers": ["Content-Type", "Authorization"]
    }
})

def download_image_from_url(url, media_files_list):
    """Download image from URL and return local filename for Anki embedding"""
    try:
        parsed_url = urlparse(url)
        filename = os.path.basename(parsed_url.path)
        if not filename or '.' not in filename:
            url_hash = hashlib.md5(url.encode()).hexdigest()[:8]
            filename = f"image_{url_hash}.jpg"
        
        valid_extensions = ['.jpg', '.jpeg', '.png', '.gif', '.svg', '.webp']
        if not any(filename.lower().endswith(ext) for ext in valid_extensions):
            filename += '.jpg'
        
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
        
        response = requests.get(url, headers=headers, timeout=30)
        response.raise_for_status()
        
        temp_path = os.path.join(tempfile.gettempdir(), filename)
        with open(temp_path, 'wb') as f:
            f.write(response.content)
        
        media_files_list.append(temp_path)
        return filename
    except Exception as e:
        app.logger.error(f"Error downloading image from {url}: {e}")
        return None

def create_enhanced_medical_model():
    """Create enhanced medical model with proper formatting"""
    enhanced_css = """
/* Base styles */
.card { 
    font-family: Arial, sans-serif;
    text-align: center;
    color: #000;
    background-color: white;
    line-height: 1.6;
    padding: 20px;
}

/* Front card styling - smaller font */
.front-content {
    font-size: 1.4em;
    text-align: center;
    margin: 20px;
}

/* Back card styling - larger font */
.back-content {
    font-size: 1.6em;
    text-align: center;
    margin: 20px;
}

/* Image styling */
img { 
    max-width: 90%;
    height: auto;
    margin: 20px auto;
    display: block;
    border-radius: 8px;
}

/* Clinical vignette - blue box with white text */
.vignette-section {
    background: #4a90e2;
    color: white;
    padding: 20px;
    margin: 20px auto;
    border-radius: 10px;
    text-align: left;
    max-width: 90%;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.vignette-section h3 {
    color: white;
    text-align: center;
    margin-bottom: 15px;
    font-size: 1.2em;
}

/* Click to reveal button */
.reveal-button {
    background: transparent;
    border: 2px solid white;
    color: white;
    padding: 12px 20px;
    cursor: pointer;
    border-radius: 8px;
    text-align: center;
    margin: 15px 0;
    width: 100%;
    font-size: 1.1em;
    font-weight: bold;
}

.reveal-button:hover {
    background: rgba(255, 255, 255, 0.1);
}

/* Hidden explanation */
.explanation {
    display: none;
    background: rgba(255, 255, 255, 0.1);
    padding: 15px;
    margin-top: 10px;
    border-radius: 5px;
    color: white;
}

.explanation strong {
    color: white;
}

.explanation .answer-highlight {
    color: #ff6b6b;
    font-weight: bold;
}

/* Mnemonic section - cream/yellow background */
.mnemonic-section {
    background: #fff8dc;
    color: #333;
    padding: 20px;
    margin: 20px auto;
    border-radius: 10px;
    max-width: 90%;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    text-align: center;
}

.mnemonic-section h3 {
    color: #8b4513;
    margin-bottom: 10px;
}

/* Notes section */
.notes-section {
    font-size: 1.2em;
    text-align: center;
    font-style: italic;
    color: #666;
    margin: 15px;
}

/* Night mode */
.night_mode { 
    color: #ffffff;
    background-color: #272828;
}

.night_mode .mnemonic-section {
    background: #3a3a3a;
    color: #ffffff;
}

.night_mode .notes-section {
    color: #cccccc;
}
"""

    fields = [
        {'name': 'Front'},
        {'name': 'Back'}
    ]
    
    templates = [
        {
            'name': 'Medical Card',
            'qfmt': '''{{Front}}''',
            'afmt': '''{{FrontSide}}
<hr id="answer">
{{Back}}'''
        }
    ]
    
    model = genanki.Model(
        1607392320,
        'Enhanced Medical Cards',
        fields=fields,
        templates=templates,
        css=enhanced_css
    )
    return model

class EnhancedFlashcardProcessor:
    def __init__(self):
        self.model = create_enhanced_medical_model()
    
    def process_cards(self, cards_data, deck_name="Medical Deck"):
        deck_id = random.randrange(1 << 30, 1 << 31)
        deck = genanki.Deck(deck_id, deck_name)
        media_files = []
        
        for card_index, card_info in enumerate(cards_data):
            app.logger.info(f"Processing card {card_index + 1}/{len(cards_data)}")
            
            # FRONT: Wrap in front-content div for proper sizing
            front_html = card_info.get('front', '')
            if front_html and not front_html.startswith('<div class="front-content">'):
                front_content = f'<div class="front-content">{front_html}</div>'
            else:
                front_content = front_html
            
            # BACK: Build the complete answer with all components
            back_parts = []
            
            # 1. Answer text - wrap in back-content div
            back_text = card_info.get('back', '')
            if back_text:
                if not back_text.startswith('<div class="back-content">'):
                    back_parts.append(f'<div class="back-content">{back_text}</div>')
                else:
                    back_parts.append(back_text)
            
            # 2. Notes (if any)
            notes = card_info.get('notes', '')
            if notes:
                if not notes.startswith('<div class="notes-section">'):
                    back_parts.append(f'<div class="notes-section">{notes}</div>')
                else:
                    back_parts.append(notes)
            
            # 3. Images (if any)
            image_data = card_info.get('image', {})
            if image_data:
                image_url = image_data.get('url', '')
                image_caption = image_data.get('caption', '')
                
                if image_url and image_url.startswith('http'):
                    downloaded_filename = download_image_from_url(image_url, media_files)
                    if downloaded_filename:
                        back_parts.append(f'<img src="{downloaded_filename}">')
                        if image_caption:
                            back_parts.append(f'<div class="image-caption">{image_caption}</div>')
            
            # 4. Clinical vignette
            vignette_data = card_info.get('vignette', {})
            if vignette_data:
                clinical_case = vignette_data.get('clinical_case', '')
                explanation = vignette_data.get('explanation', '')
                
                if clinical_case:
                    # Extract the vignette content from the HTML if it's already formatted
                    if '<div' in clinical_case:
                        back_parts.append(clinical_case)
                    else:
                        # Build the vignette HTML
                        vignette_html = '<div class="vignette-section">'
                        vignette_html += '<h3>ðŸ©º Clinical Vignette</h3>'
                        vignette_html += f'<div>{clinical_case}</div>'
                        
                        if explanation:
                            # Generate unique ID for this card
                            unique_id = f"exp_{deck_id}_{card_index}"
                            vignette_html += f'''
                            <div class="reveal-button" onclick="
                                var exp = document.getElementById('{unique_id}');
                                if (exp.style.display === 'none' || exp.style.display === '') {{
                                    exp.style.display = 'block';
                                    this.textContent = 'Hide explanation';
                                }} else {{
                                    exp.style.display = 'none';
                                    this.textContent = 'Click to reveal explanation';
                                }}
                            ">Click to reveal explanation</div>
                            '''
                            vignette_html += f'<div class="explanation" id="{unique_id}">{explanation}</div>'
                        
                        vignette_html += '</div>'
                        back_parts.append(vignette_html)
                    
                    # If explanation is provided separately (for compatibility)
                    if explanation and '<div' in clinical_case:
                        back_parts.append(explanation)
            
            # 5. Mnemonic (at the bottom)
            mnemonic = card_info.get('mnemonic', '')
            if mnemonic:
                if '<div' in mnemonic:
                    back_parts.append(mnemonic)
                else:
                    back_parts.append(f'''<div class="mnemonic-section">
                        <h3>Memory Aid</h3>
                        {mnemonic}
                    </div>''')
            
            # Combine all back parts
            back_content = '\n'.join(back_parts)
            
            # Create note with front and back
            note = genanki.Note(
                model=self.model,
                fields=[
                    front_content,
                    back_content
                ],
                tags=[tag.replace(' ', '_') for tag in card_info.get('tags', [])]
            )
            deck.add_note(note)
        
        return deck, media_files

def extract_deck_name(data):
    """Extract deck name from various data formats"""
    if isinstance(data, list) and len(data) > 0:
        if isinstance(data[0], dict) and 'deck_name' in data[0]:
            return data[0].get('deck_name')
    elif isinstance(data, dict):
        return data.get('deck_name')
    return None

def extract_cards(data):
    """Extract cards from various data formats"""
    if isinstance(data, list):
        if len(data) > 0 and isinstance(data[0], dict) and 'cards' in data[0]:
            return data[0]['cards']
        else:
            return data
    elif isinstance(data, dict):
        return data.get('cards', [])
    return []

@app.route('/api/enhanced-medical', methods=['POST', 'OPTIONS'])
def api_enhanced_medical():
    if request.method == 'OPTIONS':
        return '', 200
    
    try:
        app.logger.info("=== ENHANCED MEDICAL API CALLED ===")
        
        # Get JSON data
        data = request.get_json(force=True)
        if not data:
            return jsonify({'error': 'No JSON data provided'}), 400
        
        # Extract deck name and cards
        deck_name = extract_deck_name(data)
        cards = extract_cards(data)
        
        if not cards:
            return jsonify({'error': 'No cards provided'}), 400
        
        # Generate deck name if not provided
        if not deck_name:
            deck_name = f"Medical_Deck_{time.strftime('%Y%m%d_%H%M%S')}"
        
        app.logger.info(f"Processing {len(cards)} cards for deck '{deck_name}'")
        
        # Process cards
        processor = EnhancedFlashcardProcessor()
        deck, media_files = processor.process_cards(cards, deck_name)
        
        # Create package
        package = genanki.Package(deck)
        package.media_files = media_files
        
        # Generate filename
        safe_name = "".join(c for c in deck_name if c.isalnum() or c in (' ', '-', '_')).strip()
        if not safe_name:
            safe_name = "medical_deck"
        filename = f"{safe_name}.apkg"
        file_path = f"/tmp/{filename}"
        
        # Write package
        package.write_to_file(file_path)
        
        # Get file info
        file_size = os.path.getsize(file_path)
        app.logger.info(f"Generated deck: {file_path} (size: {file_size} bytes)")
        
        # Generate response
        download_url = f"/download/{filename}"
        full_url = f"{request.host_url.rstrip('/')}{download_url}"
        
        result = {
            'success': True,
            'status': 'completed',
            'deck_name': deck_name,
            'cards_processed': len(cards),
            'media_files_downloaded': len(media_files),
            'file_size': file_size,
            'filename': filename,
            'download_url': download_url,
            'full_download_url': full_url,
            'message': f'Successfully generated deck with {len(cards)} cards'
        }
        
        return jsonify(result), 200
        
    except Exception as e:
        app.logger.error(f"ERROR: {str(e)}")
        import traceback
        app.logger.error(f"Traceback: {traceback.format_exc()}")
        return jsonify({
            'error': 'Processing failed',
            'message': str(e),
            'traceback': traceback.format_exc()
        }), 500

@app.route('/api/simple', methods=['POST', 'OPTIONS'])
def api_simple():
    """Legacy compatibility endpoint"""
    return api_enhanced_medical()

@app.route('/download/<path:filename>')
def download_file(filename):
    try:
        file_path = os.path.join('/tmp', filename)
        if not os.path.exists(file_path):
            return f"File not found: {filename}", 404
        
        return send_file(
            file_path,
            as_attachment=True,
            download_name=filename,
            mimetype='application/octet-stream'
        )
    except Exception as e:
        app.logger.error(f"Download error: {e}")
        return "Download failed", 500

@app.route('/api/health', methods=['GET'])
def api_health():
    return jsonify({
        'status': 'healthy',
        'service': 'Enhanced Medical Anki Generator',
        'version': '8.0.0',
        'features': [
            'proper_front_back_size_difference',
            'clinical_vignettes_with_click_reveal', 
            'blue_vignette_boxes',
            'cream_mnemonic_boxes',
            'images_with_captions',
            'proper_html_preservation'
        ],
        'timestamp': int(time.time())
    }), 200

@app.route('/')
def index():
    return """
    <!DOCTYPE html>
    <html>
    <head>
        <title>Enhanced Medical Anki Generator</title>
        <style>
            body {
                font-family: Arial, sans-serif;
                max-width: 800px;
                margin: 50px auto;
                padding: 20px;
            }
        </style>
    </head>
    <body>
        <h1>Medical Anki Generator</h1>
        <p>Version 8.0.0 - Perfect formatting with proper font sizes</p>
    </body>
    </html>
    """

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)